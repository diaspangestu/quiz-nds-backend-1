// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: calculate_umur.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Age_HitungUmur_FullMethodName = "/proto.Age/HitungUmur"
)

// AgeClient is the client API for Age service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgeClient interface {
	HitungUmur(ctx context.Context, in *RequestTanggalLahir, opts ...grpc.CallOption) (*ResponseTanggalLahirSekarang, error)
}

type ageClient struct {
	cc grpc.ClientConnInterface
}

func NewAgeClient(cc grpc.ClientConnInterface) AgeClient {
	return &ageClient{cc}
}

func (c *ageClient) HitungUmur(ctx context.Context, in *RequestTanggalLahir, opts ...grpc.CallOption) (*ResponseTanggalLahirSekarang, error) {
	out := new(ResponseTanggalLahirSekarang)
	err := c.cc.Invoke(ctx, Age_HitungUmur_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgeServer is the server API for Age service.
// All implementations should embed UnimplementedAgeServer
// for forward compatibility
type AgeServer interface {
	HitungUmur(context.Context, *RequestTanggalLahir) (*ResponseTanggalLahirSekarang, error)
}

// UnimplementedAgeServer should be embedded to have forward compatible implementations.
type UnimplementedAgeServer struct {
}

func (UnimplementedAgeServer) HitungUmur(context.Context, *RequestTanggalLahir) (*ResponseTanggalLahirSekarang, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitungUmur not implemented")
}

// UnsafeAgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgeServer will
// result in compilation errors.
type UnsafeAgeServer interface {
	mustEmbedUnimplementedAgeServer()
}

func RegisterAgeServer(s grpc.ServiceRegistrar, srv AgeServer) {
	s.RegisterService(&Age_ServiceDesc, srv)
}

func _Age_HitungUmur_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTanggalLahir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgeServer).HitungUmur(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Age_HitungUmur_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgeServer).HitungUmur(ctx, req.(*RequestTanggalLahir))
	}
	return interceptor(ctx, in, info, handler)
}

// Age_ServiceDesc is the grpc.ServiceDesc for Age service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Age_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Age",
	HandlerType: (*AgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HitungUmur",
			Handler:    _Age_HitungUmur_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculate_umur.proto",
}
